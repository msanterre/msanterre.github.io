<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alpaca Lunchbox</title>
    <description>Alpaca Lunchbox is a small ruby, JS and elixir software consulting agency located in Vancouver, BC.
</description>
    <link>http://alpacalunchbox.com/</link>
    <atom:link href="http://alpacalunchbox.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Sep 2016 16:09:19 -0700</pubDate>
    <lastBuildDate>Wed, 21 Sep 2016 16:09:19 -0700</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Digging into redis snapshotting</title>
        <description>&lt;p&gt;There’s a very important linux setting to change when you set up a redis server on an instance: &lt;strong&gt;vm.overcommit = 1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you haven’t set it up yet, you should do it now. Without it you’re essentially limited to half the RAM available on your machine, after that redis will be unable to create snapshots.&lt;/p&gt;

&lt;p&gt;The high level steps of redis snapshots is this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redis forks its process&lt;/li&gt;
  &lt;li&gt;The parent continues on to accept requests&lt;/li&gt;
  &lt;li&gt;The child converts the working memory into the rdb format and saves it to disk&lt;/li&gt;
  &lt;li&gt;The old rdb file is removed and replaced by the new one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fork_(system_call)&quot;&gt;Forking is a UNIX system call&lt;/a&gt; that makes a replica of the process that calls it. This means that the child will have a copy of all of the memory that the parent had.&lt;/p&gt;

&lt;p&gt;This means that when your 10GB redis instance forks, you will now have 2 processes with each 10GB of data.&lt;/p&gt;

&lt;p&gt;That sounds ridiculous right?&lt;/p&gt;

&lt;p&gt;On a 20GB RAM machine, you would need to keep 10GB free just for the snapshot process. It’s incredibly wasteful.&lt;/p&gt;

&lt;p&gt;Fortunately, there’s something brilliant called &lt;a href=&quot;https://en.wikipedia.org/wiki/Copy-on-write&quot;&gt;Copy on write&lt;/a&gt; (CoW) which solves this issue.&lt;/p&gt;

&lt;p&gt;This allows processes created by forking to use the parent process’ memory until a process updates that memory page. If the parent (or child) writes to its memory, it will create a new memory page and write there instead, but the child process will still reference the old memory page.&lt;/p&gt;

&lt;p&gt;That’s cool and all, but why do you need &lt;strong&gt;vm.overcommit = 1&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;Overcomitting is allowing a process to allocate more memory than is physically available on the system. You’re betting on never &lt;em&gt;really&lt;/em&gt; having to use it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kernel.org/doc/Documentation/vm/overcommit-accounting&quot;&gt;These are the system options:&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0	-	Heuristic overcommit handling. Obvious overcommits of
		address space are refused. Used for a typical system. It
		ensures a seriously wild allocation fails while allowing
		overcommit to reduce swap usage.  root is allowed to
		allocate slightly more memory in this mode. This is the
		default.

1	-	Always overcommit. Appropriate for some scientific
		applications. Classic example is code using sparse arrays
		and just relying on the virtual memory consisting almost
		entirely of zero pages.

2	-	Don't overcommit. The total address space commit
		for the system is not permitted to exceed swap + a
		configurable amount (default is 50%) of physical RAM.
		Depending on the amount you use, in most situations
		this means a process will not be killed while accessing
		pages but will receive errors on memory allocation as
		appropriate.

		Useful for applications that want to guarantee their
		memory allocations will be available in the future
		without having to initialize every page.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You typically want to go for 0 or 2. Allowing a program to allocate more memory than is available will result in a sudden crash if it tries to actually use memory that’s not available. In most cases, this is a very bad thing. Especially when you’re dealing with a database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why 1 then?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since the redis snapshot process is only used to dump memory to disk, it will not change any of its parent memory and it won’t last long enough for the parent to change a significant amount of values. Unless you’re very close to your physical limit, the case where there are enough changes done by the parent to go above the physical memory limit is very unlikely. This makes choosing &lt;strong&gt;always overcommit&lt;/strong&gt; a very reasonable option for the snapshot fork.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Sep 2016 00:00:00 -0700</pubDate>
        <link>http://alpacalunchbox.com/2016/09/01/digging-into-redis-snapshotting.html</link>
        <guid isPermaLink="true">http://alpacalunchbox.com/2016/09/01/digging-into-redis-snapshotting.html</guid>
        
        
      </item>
    
      <item>
        <title>Let's build a simple database - Part 1: The basics</title>
        <description>&lt;h3 id=&quot;why-build-a-database&quot;&gt;Why build a database?&lt;/h3&gt;

&lt;p&gt;Most people these days use a database. They’re pretty much the centerpoint of every web application. Almost everyone knows how to use them, which they’re made easy to use these days. You learn the most popular ORM for your language and that’s good enough for your data needs.&lt;/p&gt;

&lt;p&gt;For most people that’s enough for what they need to handle, but when you get into a higher scale, either be it large datasets, very high throughput, or complex queries, it becomes obvious that you need to dig deeper.&lt;/p&gt;

&lt;p&gt;So why spend a bunch of time learning this now? You can just learn it when you need to, &lt;strong&gt;if&lt;/strong&gt; you need to.&lt;/p&gt;

&lt;p&gt;Well, because you might &lt;strong&gt;need&lt;/strong&gt; to at 6pm, before going to dinner on the first day of your holiday. (Yes I’m speaking from experience), I was at a tech conference when I received a call from the CEO of my company: “Everything is down, nothing is working”.
After a quick look, the error was coming from redis, which we used in almost every aspect of our app.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Redis::CommandError: MISCONF Redis is configured to save RDB snapshots, but is currently not able to persist on disk. Commands that may modify the data set are disabled. Please check Redis logs for details about the error.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I hadn’t set up &lt;code class=&quot;highlighter-rouge&quot;&gt;vm.overcommit = 1&lt;/code&gt; on the server. &lt;a href=&quot;/2016/09/01/digging-into-redis-snapshotting.html&quot;&gt;This meant that redis couldn’t do a background save since the system wouldn’t give it enough memory and failed even though it still had 10GB free memory.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It was an interesting lesson, but I would’ve preferred not learning it the hard way. The more you know, the more you can avoid disaster.&lt;/p&gt;

&lt;p&gt;I’m not going to assume any knowledge of how databases work, so let’s start with the basic building blocks.&lt;/p&gt;

&lt;p&gt;We’ll start with something that acts a bit like Redis. Actually more simple than redis: Only the GET, SET and DEL operations of redis.&lt;/p&gt;

&lt;h3 id=&quot;lets-look-at-what-we-need&quot;&gt;Let’s look at what we need:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A long living process&lt;/li&gt;
  &lt;li&gt;It needs to accept network connections&lt;/li&gt;
  &lt;li&gt;Data that every connection can access&lt;/li&gt;
  &lt;li&gt;A data structure to store this effectively&lt;/li&gt;
  &lt;li&gt;A protocol for getting, setting and deleting data&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lets-build-it&quot;&gt;Let’s build it!&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;NOTE: I will only paste snippets, &lt;a href=&quot;https://github.com/msanterre/potatodb/blob/1-basic/main.go&quot;&gt;you can consult this page&lt;/a&gt; to get the full version&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-process&quot;&gt;The process&lt;/h4&gt;
&lt;p&gt;Let’s keep our promise of simplicity and go with the simplest way to make an API over the network: an HTTP API.&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Listening on %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listenAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fatal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ListenAndServe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listenAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This gives us our long running process and our ability to accept network connections. It doesn’t do much, but we’ll get to that in a bit.&lt;/p&gt;

&lt;h4 id=&quot;the-data&quot;&gt;The data&lt;/h4&gt;

&lt;p&gt;It’s pretty clear what needs to go here. A map (or hash, hashmap) is very commonly used for key/value storage. So let’s just Go’s internal map data structure.&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;the-api&quot;&gt;The API&lt;/h4&gt;

&lt;p&gt;This is the most complicated part of the whole database at this point, and it’s still pretty trivial.&lt;/p&gt;

&lt;p&gt;In this case, I decided to go with the REST actions for the API (except a post can overwrite instead of only creating).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func DBMethod(w http.ResponseWriter, req *http.Request) {
	key := strings.TrimPrefix(req.RequestURI, &quot;/db/&quot;)

	if key == &quot;&quot; {
		NotFoundError(w)
		return
	}

	switch req.Method {
	case &quot;GET&quot;:
		if value, ok := Data[key]; ok {
			io.WriteString(w, value)
		} else {
			NotFoundError(w)
		}
	case &quot;POST&quot;, &quot;PUT&quot;, &quot;PATCH&quot;:
		body, err := ioutil.ReadAll(req.Body)
		if err != nil {
			ServerError(w, err)
			log.Println(err)
			return
		}
		Data[key] = string(body)

		w.WriteHeader(200)
	case &quot;DELETE&quot;:
		delete(Data, key)
		w.WriteHeader(200)
	}
}

func main() {
    ...
	http.HandleFunc(&quot;/db/&quot;, DBMethod)
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can test it out with a few curl commands.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -X POST http://localhost:5050/db/potato -d &quot;Some value!&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Will store the value in the &lt;strong&gt;potato&lt;/strong&gt; key and you can fetch it right back with&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;curl http://localhost:5050/db/potato&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;were-done&quot;&gt;We’re done!&lt;/h3&gt;

&lt;p&gt;Congrats! You made a simple database.&lt;/p&gt;

&lt;p&gt;It has a &lt;em&gt;lot&lt;/em&gt; of issues and isn’t very useful for now. You can share data across processes, but for starters, &lt;strong&gt;all&lt;/strong&gt; your data will be gone if you shut it down. That’s not a very useful database.&lt;/p&gt;

&lt;p&gt;We’ll handle &lt;strong&gt;durability&lt;/strong&gt; in the next post and if you’d like, try to figure out what else is wrong with it and mention it in the comments below.&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Aug 2016 00:00:00 -0700</pubDate>
        <link>http://alpacalunchbox.com/2016/08/28/building-a-simple-database.html</link>
        <guid isPermaLink="true">http://alpacalunchbox.com/2016/08/28/building-a-simple-database.html</guid>
        
        
      </item>
    
      <item>
        <title>Hosting web applications on CoreOS fleet and AWS</title>
        <description>&lt;p&gt;If you haven’t checked out CoreOS and fleet, you should definitely do so right now. I’ve tried all of the docker orchestration services, and so
far it has been the most reliable and barebones way to host your application. Kubernetes and Swarm have really nice utilities, but if those utilities fail or don’t work one day while your live application is running, you’re kind of screwed.&lt;/p&gt;

&lt;p&gt;I’ll go into more detail of CoreOS later on, but for now here’s an easy way of setting up your web app on a fleet machine.&lt;/p&gt;

&lt;p&gt;Your service file should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sampleweb@.service&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Description=Sample Web App
After=docker.service
Requires=docker.service

[Service]
User=core
Restart=always

ExecStartPre=-/usr/bin/docker stop sampleweb-%i
ExecStartPre=-/usr/bin/docker rm -f sampleweb-%i
ExecStartPre=/usr/bin/docker pull msanterre/sampleweb

ExecStart=/bin/bash -c '/usr/bin/docker run --name sampleweb-%i \
-p 4444:80 msanterre/sampleweb'

[X-Fleet]
X-Conflicts=sampleweb@*.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is a pretty standard service file. If you don’t understand what’s going on here, &lt;a href=&quot;https://coreos.com/fleet/docs/latest/launching-containers-fleet.html&quot;&gt;please go here&lt;/a&gt; to see the official fleet documentation.&lt;/p&gt;

&lt;p&gt;And that should get your container running on fleet! Success!&lt;/p&gt;

&lt;p&gt;The problem now is that fleet starts on &lt;em&gt;one&lt;/em&gt; of your machines, so where does your DNS point to?&lt;/p&gt;

&lt;p&gt;If you’re an experience AWS user, you know to &lt;a href=&quot;http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/using-domain-names-with-elb.html&quot;&gt;use Route 53 to point to an Elastic Load Balancer (ELB)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Well now you have a way to point your domain to your machines, you could just add all your fleet machines to your ELB instance and call it a day.&lt;/p&gt;

&lt;p&gt;Health checks on ELB keep checking if your app is up on the specified port (4444 in this case). When it’s launched on one of the machine, it will eventually pass the ELB health check and will start receiving traffic. When it dies, it will fail the health check a few times and stop getting traffic. &lt;strong&gt;This method will make it possible for people to hit a stopped application until the AWS fails the health check&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If this is good enough for you, good! It makes things pretty simple. If not, just keep on reading.&lt;/p&gt;

&lt;p&gt;Make these additions to your service file:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecStartPre=/usr/bin/docker pull anigeo/awscli&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ExecStartPost=/bin/bash -c '\
/usr/bin/docker run --rm \
-e AWS_SECRET_ACCESS_KEY=`etcdctl get /aws/secret_access_key` \
-e AWS_ACCESS_KEY_ID=`etcdctl get /aws/access_key_id` \
-e AWS_DEFAULT_REGION=`etcdctl get /aws/region`  \
anigeo/awscli elb register-instances-with-load-balancer --load-balancer-name sampleweb --instances $(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)'

ExecStop=/bin/bash -c '\
/usr/bin/docker run --rm \
-e AWS_SECRET_ACCESS_KEY=`etcdctl get /aws/secret_access_key` \
-e AWS_ACCESS_KEY_ID=`etcdctl get /aws/access_key_id` \
-e AWS_DEFAULT_REGION=`etcdctl get /aws/region`  \
anigeo/awscli elb deregister-instances-from-load-balancer --load-balancer-name sampleweb --instances $(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note: Make sure your aws credetials are in etcd&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Everything should stay the same for you except &lt;strong&gt;sampleweb&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This will register your application onto the ELB when it starts and deregister it when you stop it. This way you should have no one hitting dead applications.&lt;/p&gt;

&lt;h3 id=&quot;final-file&quot;&gt;Final file&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sampleweb@.service&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Description=Sample Web App
After=docker.service
Requires=docker.service

[Service]
User=core
Restart=always

ExecStartPre=-/usr/bin/docker stop sampleweb-%i
ExecStartPre=-/usr/bin/docker rm -f sampleweb-%i
ExecStartPre=/usr/bin/docker pull msanterre/sampleweb
ExecStartPre=/usr/bin/docker pull anigeo/awscli

ExecStart=/bin/bash -c '/usr/bin/docker run --name sampleweb-%i \
-p 4444:80 msanterre/sampleweb'

ExecStartPost=/bin/bash -c '\
/usr/bin/docker run --rm \
-e AWS_SECRET_ACCESS_KEY=`etcdctl get /aws/secret_access_key` \
-e AWS_ACCESS_KEY_ID=`etcdctl get /aws/access_key_id` \
-e AWS_DEFAULT_REGION=`etcdctl get /aws/region`  \
anigeo/awscli elb register-instances-with-load-balancer --load-balancer-name sampleweb --instances $(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)'

ExecStop=/bin/bash -c '\
/usr/bin/docker run --rm \
-e AWS_SECRET_ACCESS_KEY=`etcdctl get /aws/secret_access_key` \
-e AWS_ACCESS_KEY_ID=`etcdctl get /aws/access_key_id` \
-e AWS_DEFAULT_REGION=`etcdctl get /aws/region`  \
anigeo/awscli elb deregister-instances-from-load-balancer --load-balancer-name sampleweb --instances $(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)'

[X-Fleet]
X-Conflicts=sampleweb@*.service
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 05 May 2016 22:00:00 -0700</pubDate>
        <link>http://alpacalunchbox.com/2016/05/05/registering-fleet-on-aws-elb.html</link>
        <guid isPermaLink="true">http://alpacalunchbox.com/2016/05/05/registering-fleet-on-aws-elb.html</guid>
        
        
      </item>
    
      <item>
        <title>Building lightweight APIs with Go's Gorilla multiplexer and Negroni</title>
        <description>&lt;p&gt;Sometimes, you just need to make a fast API. It doesn’t need to be big, it just needs to be fast and not take up half of your server’s memory.&lt;/p&gt;

&lt;p&gt;This is what happened when the company I work for suddenly started hitting the rate limit that &lt;a href=&quot;http://bit.ly&quot;&gt;bit.ly&lt;/a&gt; recently started enforcing for on their URL shortening.&lt;/p&gt;

&lt;p&gt;We needed to remedy this problem as soon as possible. We’re very dependent on this service, so we either needed to build this fast or pay up a huge yearly fee.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Very fast&lt;/li&gt;
  &lt;li&gt;Easily built and maintainable&lt;/li&gt;
  &lt;li&gt;Stays up, without maintenance for several months&lt;/li&gt;
  &lt;li&gt;Low memory footprint&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re a rails shop, but doing this in rails or Sinatra would be quite slow, require a bunch of memory (multiple instances to handle concurrent requests) and would probably need to be looked after. So I opted for something a bit simpler.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gorilla-muxhttpwwwgorillatoolkitorgpkgmux&quot;&gt;&lt;em&gt;&lt;a href=&quot;http://www.gorillatoolkit.org/pkg/mux&quot;&gt;Gorilla mux&lt;/a&gt;&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;I looked a bit online, and all the benchmarks seemed to point to this framework. It’s a small, but powerful addition on top of the standard Go library http multiplexer. Mostly, it’s just a router.&lt;/p&gt;

&lt;p&gt;A really simple application would look like this:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HomeHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/blog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BlogHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/products/{id}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProductHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Even if you’re not familiar with Go, you can see that it just handles certain routes and pushes it to specific handlers. The handlers are just methods with this definition:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HomeHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Code!&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can also guess, &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt; will be bound to anything passed into that section of the URL and will be accessible through the &lt;code class=&quot;highlighter-rouge&quot;&gt;mux.Vars&lt;/code&gt; map.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vars&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;negronihttpsgithubcomcodegangstanegroni&quot;&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/codegangsta/negroni&quot;&gt;Negroni&lt;/a&gt;&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;Negroni is the second piece of this amazing combo. It’s a &lt;strong&gt;middleware manager&lt;/strong&gt; that allows you to bring in some extra pieces in your server pipeline. It integrates with gorilla mux like so:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandleFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HomeHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negroni&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Middleware1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Middleware2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Or use a middleware with the Use() function&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Middleware3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// router goes last&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;:3000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Again, middlewares are just functions with this definition:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// do some stuff before&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// do some stuff after&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This allows you to place some code between your request and your handler. You can even interrupt any further processing if you want to. For example: You get an unauthenticated request and you just want to respond with a 401/403 and be done with the request. The call to &lt;strong&gt;next&lt;/strong&gt; brings it to the next step in the middleware pipeline.&lt;/p&gt;

&lt;p&gt;This package lets you add things like &lt;a href=&quot;https://github.com/thoas/stats&quot;&gt;stats&lt;/a&gt; easily in your process without disturbing any of your own code. Negroni comes with basic middleware like panic recovery, logging and static file serving. You can get all of it by just using &lt;code class=&quot;highlighter-rouge&quot;&gt;Negroni.Classic()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The really nice part of this combo is that you can have specific middleware running on only parts of your API. Let’s take this example:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BasicRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiRouter&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagesRouter&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PagesRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negroni&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Classic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negroni&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negroni&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HandlerFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AuthenticateRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negroni&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PathPrefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negroni&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;New&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;negroni&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pagesRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.0.0.0:9292&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In this case, I just run my request authentication on my API and I leave my pages alone. &lt;code class=&quot;highlighter-rouge&quot;&gt;ApiRouter&lt;/code&gt; is a gorilla router instance. I also found having a router per path prefix kept the application a bit more rails-like and the files more manageable.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fGXbIdX.jpg&quot; alt=&quot;canoe&quot; /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you’d like to feel the speed of an API built with the gorilla/negroni combo, I decided to open source the URL shortener, named &lt;strong&gt;canoe&lt;/strong&gt; that I built using this stack. You can find it &lt;a href=&quot;https://github.com/msanterre/canoe&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feel free to fork it and send me pull request. I’d also love to hear some feedback.&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jun 2015 06:21:00 -0700</pubDate>
        <link>http://alpacalunchbox.com/2015/06/01/building-lightweight-apis-with-go.html</link>
        <guid isPermaLink="true">http://alpacalunchbox.com/2015/06/01/building-lightweight-apis-with-go.html</guid>
        
        
      </item>
    
      <item>
        <title>Setting up AngularJS inside a rails app</title>
        <description>&lt;p&gt;Unless you’ve been completely disconnected from tech news for the last 2 years, you probably heard about AngularJS and how badass it is (or how it’s complete shit). If you’re a Rails developer, you’re probably tempted to just include it into a rails application. Here are some things to consider before you do this:&lt;/p&gt;

&lt;h4 id=&quot;when-you-should-do-this&quot;&gt;When you should do this&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;You want some of your application to be handled by Rails, while you want other parts require to be a bit more dynamic&lt;/li&gt;
  &lt;li&gt;You currently have a Ruby on Rails application and you want to slowly migrate the view part to AngularJS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;when-you-really-shouldnt&quot;&gt;When you really shouldn’t&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;You want your application to be a full Single Page App and you want to use Rails as your API&lt;/li&gt;
  &lt;li&gt;You already know Ruby on Rails, so you think it will be easier to do it like this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you fall into the second category, I highly suggest you set up your application as a separate project using an AngularJS &lt;a href=&quot;http://yeoman.io/&quot;&gt;yeoman&lt;/a&gt; template. Not only will it be cleaner, but it will allow you to use a lot of the &lt;a href=&quot;https://nodejs.org/&quot;&gt;node.js&lt;/a&gt; based tools like &lt;a href=&quot;http://bower.io/&quot;&gt;bower&lt;/a&gt; and &lt;a href=&quot;http://gulpjs.com/&quot;&gt;gulp&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You could still use those inside a Rails app, but they are &lt;em&gt;not&lt;/em&gt; built to work together.&lt;/p&gt;

&lt;h2 id=&quot;now-the-good-parts&quot;&gt;Now the good parts&lt;/h2&gt;

&lt;p&gt;Good, so you’re a good match for this combo. Let’s get to the meaty parts.&lt;/p&gt;

&lt;h3 id=&quot;routes&quot;&gt;Routes&lt;/h3&gt;

&lt;p&gt;First of all, the routing will be handled by your AngularJS app, so you need to redirect any path under that namespace to your angular app.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;config/routes.rb&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# The root path&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/angularjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;angularjs#index&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Redirect any requests to other paths to&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/angularjs/*path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;angularjs#index&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This means that requests to http://yourwebsite.com/angularjs/customers/5 will be redirected to the same view, so your AngularJS router can pick it up and deal with it.&lt;/p&gt;

&lt;h3 id=&quot;controllers&quot;&gt;Controllers&lt;/h3&gt;
&lt;p&gt;Rails typically does nothing here. This is all you need:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app/controller/angularjs_controller.rb&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AngularjsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;views&quot;&gt;Views&lt;/h3&gt;
&lt;p&gt;Since all of your views will be Javascript templates, all you need here is to load the application. A basic setup will consist of this simple layout:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app/views/layouts/angularjs.html.erb&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;∆ngular&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csrf_meta_tags&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-view&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;development?&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.js&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular-route.min.js&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular-cookies.min.js&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;//ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular-resource.min.js&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;angularjs_app&quot;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;javascript&quot;&gt;Javascript&lt;/h3&gt;

&lt;p&gt;You should separate your AngularJS application from your Rails application’s javascript. In the previous layout, I gave it an include tag, which will be a file that only requires other files inside.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;app/javascripts/angularjs_app.js&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//= require angularjs_app/init.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//= require angularjs_app/module1/index.js&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//= require angularjs_app/module/2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;app/javascripts/angularjs_app/init.js&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myapp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;ngRoute&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;ngResource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;And that’s it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can treat it as any other AngularJS app. Put your code into modules so you can pop features in and out and you can freely use Ruby on Rails everywhere else in your app. The other beautiful thing about it is that you’re serving your AngularJS app on the same domain as your API, so you don’t need to worry about &lt;strong&gt;CORS&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The other great thing about this method is that authentication will be dead simple and you can handle it with your rails app, no need to do anything on the Javascript side. If there’s enough interest, I’ll talk about it on a future post.&lt;/p&gt;

&lt;p&gt;I hope this post helps you out. Feel free to leave some comments below!&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Apr 2015 03:56:22 -0700</pubDate>
        <link>http://alpacalunchbox.com/2015/04/27/setting-up-angularjs-inside-a-rails-app.html</link>
        <guid isPermaLink="true">http://alpacalunchbox.com/2015/04/27/setting-up-angularjs-inside-a-rails-app.html</guid>
        
        
      </item>
    
  </channel>
</rss>
